CREATE TABLE "EQUIP_OWNER"."LEGACY_ENTITY_STATUS" 
(	
	"ENTITY_STATUS_ID" NUMBER(*,0) GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOT NULL ENABLE, 
	"ENTITY_TYPE" VARCHAR2(400 BYTE) NOT NULL ENABLE, 
	"ENTITY_ID" VARCHAR2(100 BYTE) NOT NULL ENABLE, 
	"LEGACY_ENTITY_STATUS_ID" NUMBER NOT NULL ENABLE, 
	"LEGACY_ENTITY_TYPE" VARCHAR2(400 BYTE) NOT NULL ENABLE, 
	"LEGACY_ENTITY_ID" NUMBER NOT NULL ENABLE, 
	"USER_ID" VARCHAR2(50 BYTE) NOT NULL ENABLE, 
	"TIMESTAMP" DATE NOT NULL ENABLE, 
	"STATUS_TEXT" VARCHAR2(100 BYTE) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(4000 BYTE), 
	 CONSTRAINT "PK_LEGACY_ENTITY_STATUS" PRIMARY KEY ("ENTITY_STATUS_ID")
);

CREATE TABLE "EQUIP_OWNER"."TRAX_RESULT" 
(	
	"TRAX_RESULT_ID" NUMBER(*,0) GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOT NULL ENABLE, 
	"SOURCE_ENTITY_TYPE" VARCHAR2(400 BYTE) NOT NULL ENABLE, 
	"SOURCE_ENTITY_ID" VARCHAR2(100 BYTE) NOT NULL ENABLE, 
	"TARGET_ENTITY_TYPE" VARCHAR2(400 BYTE) NOT NULL ENABLE, 
	"TARGET_ENTITY_ID" VARCHAR2(100 BYTE), 
	"TARGET_ENTITY_PATH" VARCHAR2(4000 BYTE),
	"LAST_RESULT" VARCHAR2(400 BYTE), 
	"LAST_ERROR" VARCHAR2(4000 BYTE), 
	"CONTENT_SIZE" NUMBER,
	"CREATE_DATE" DATE NOT NULL ENABLE,
	 CONSTRAINT "PK_TRAX_RESULT" PRIMARY KEY ("TRAX_RESULT_ID")
);

create or replace procedure "EQUIP_OWNER".merge_legacy_entity_status(
    I_ENTITY_TYPE in varchar2,
    I_ENTITY_ID varchar2,
    I_LEGACY_ENTITY_STATUS_ID in number,
    I_LEGACY_ENTITY_TYPE in varchar2,
	I_LEGACY_ENTITY_ID in number,
	I_USER_ID in varchar2,
	I_TIMESTAMP in date,
	I_STATUS_TEXT in varchar2,
	I_DESCRIPTION in varchar2
)
is
begin
    merge into "EQUIP_OWNER".LEGACY_ENTITY_STATUS a
    using (select I_ENTITY_TYPE as ENTITY_TYPE, I_ENTITY_ID as ENTITY_ID, I_LEGACY_ENTITY_STATUS_ID as LEGACY_ENTITY_STATUS_ID, 
            I_LEGACY_ENTITY_TYPE as LEGACY_ENTITY_TYPE, I_LEGACY_ENTITY_ID as LEGACY_ENTITY_ID, I_USER_ID as USER_ID, 
            I_TIMESTAMP as TIMESTAMP, I_STATUS_TEXT as STATUS_TEXT, I_DESCRIPTION as DESCRIPTION from dual) b
        on (a.legacy_entity_type = b.LEGACY_ENTITY_TYPE and a.legacy_entity_status_id = b.LEGACY_ENTITY_STATUS_ID)
    when matched then 
        update set 
            ENTITY_TYPE = b.ENTITY_TYPE,
            ENTITY_ID = b.ENTITY_ID,
            LEGACY_ENTITY_ID = b.LEGACY_ENTITY_ID,
            USER_ID = b.USER_ID,
            TIMESTAMP = b.TIMESTAMP,
            STATUS_TEXT = b.STATUS_TEXT,
            DESCRIPTION = b.DESCRIPTION
    when not matched then 
        insert (ENTITY_TYPE, ENTITY_ID, LEGACY_ENTITY_STATUS_ID, LEGACY_ENTITY_TYPE, LEGACY_ENTITY_ID, USER_ID, TIMESTAMP, STATUS_TEXT, DESCRIPTION) 
            VALUES (b.ENTITY_TYPE, b.ENTITY_ID, b.LEGACY_ENTITY_STATUS_ID, b.LEGACY_ENTITY_TYPE, b.LEGACY_ENTITY_ID, b.USER_ID, b.TIMESTAMP, b.STATUS_TEXT, b.DESCRIPTION)
    ;
end;
