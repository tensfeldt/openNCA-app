package com.pfizer.equip.searchservice.search;

import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import com.pfizer.elasticsearch.api.client.ElasticSearchClient;
import com.pfizer.elasticsearch.api.client.ElasticSearchClientException;
import com.pfizer.elasticsearch.dto.Query;
import com.pfizer.equip.filedata.exceptions.FileDataException;
import com.pfizer.equip.searchable.dto.InstantDeserializer;
import com.pfizer.equip.searchservice.dto.CommentsSearchResult;
import com.pfizer.equip.searchservice.dto.FileDataSearchResult;
import com.pfizer.equip.searchservice.dto.FileTextSearchResult;
import com.pfizer.equip.searchservice.dto.MetaDataSearchResult;
import com.pfizer.equip.searchservice.dto.SearchResponse;
import com.pfizer.equip.searchservice.dto.SearchResults;
import com.pfizer.equip.searchservice.exception.SearchException;
import com.pfizer.equip.service.client.ServiceCallerException;
import com.pfizer.modeshape.api.client.ModeshapeClientException;

/**
 * Encapsulates data for a search against elasticsearch.
 * 
 * @author HeinemanWP
 *
 */
public class Search extends BaseSearch {
	public static Searches searches = new Searches();
	private int count;
	private String server;
	private String index;
	private String type;
	private Query query;
	
	public Search() {}
	
	public static Searches getSearches() {
		return searches;
	}

	public static void setSearches(Searches searches) {
		Search.searches = searches;
	}

	public int getCount() {
		return count;
	}

	public void setCount(int count) {
		this.count = count;
	}
	
	
	public String getServer() {
		return server;
	}

	public void setServer(String server) {
		this.server = server;
	}

	public String getIndex() {
		return index;
	}

	public void setIndex(String index) {
		this.index = index;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public Query getQuery() {
		return query;
	}

	public void setQuery(Query query) {
		this.query = query;
	}

	public SearchResponse initiateSearch(
			String server, 
			String username, 
			String password, 
			String index, 
			String type, 
			Query query) throws SearchException {
		this.server = server;
		this.index = index;
		this.query = query;
		SearchResponse returnValue = new SearchResponse();
		query.setFrom(0);
		query.setSize(0);
		try {
			ElasticSearchClient esc = new ElasticSearchClient(server, username, password);
			String result = esc.searchIndex(index, type, query.toJson());
			searchId = UUID.randomUUID().toString();
			expires = computeExpirationTime();
			count = getCount(result);
			searches.addSearch(searchId, this);
			returnValue.setSearchId(searchId);
			returnValue.setExpires(expires.toString());
			returnValue.setCount(count);
			returnValue.setQuery(query);
			returnValue.setIndex(index);
			return returnValue;
		} catch (ServiceCallerException | ElasticSearchClientException e) {
			throw new SearchException(e);
		}
	}
	
	public SearchResults searchResults(
			String server, 
			String username, 
			String password, 
			String type, 
			int offset,
			int count) throws SearchException{
		this.server = server;
		query.setFrom(offset);
		query.setSize(count);
		ElasticSearchClient esc;
		try {
			esc = new ElasticSearchClient(server, username, password);
			String result = esc.searchIndex(index, type, query.toJson());
			List<Object> results = marshallResults(result);
			expires = computeExpirationTime();
			int resultCount = getCount(result);
			SearchResults returnValue = new SearchResults();
			returnValue.setSearchId(searchId);
			returnValue.setExpires(expires.toString());
			returnValue.setCount(resultCount);
			returnValue.setResults(results);
			return returnValue;
		} catch (ServiceCallerException | ElasticSearchClientException | ModeshapeClientException | FileDataException e) {
			throw new SearchException(e);
		}
		
	}
	
	private Date computeExpirationTime() {
		Date current = new Date();
		Date expires = new Date(current.getTime() + 5L * 60L * 1000L);
		return expires;
	}
	
	private int getCount(String result) {
		String s = "\"hits\":{\"total\":";
		int start = result.indexOf(s) + s.length();
		int stop = result.indexOf(",", start);
		String count = result.substring(start, stop);
		return Integer.parseInt(count);
	}

	private List<Object> marshallResults(String result) throws ServiceCallerException, ModeshapeClientException, FileDataException {
		switch(index) {
		case "esvalndx-nca":
			return marshallMetaDataSearchResults(result);
		case "escommentndx-nca":
			return marshallCommentsSearchResults(result);
		case "filedatandx-nca":
			return marshallFileDataSearchResults(result);
		case "contentndx-nca":
			return marshallFileTextSearchResults(result);
		default:
			break;
		}
		// TODO Auto-generated method stub
		return null;
	}

	private List<Object> marshallMetaDataSearchResults(String result) {
		List<Object> returnValue = new ArrayList<>();
		Gson gson = new GsonBuilder().registerTypeAdapter(Instant.class, new InstantDeserializer()).create();
		JsonParser jp = new JsonParser();
		JsonElement jelem = jp.parse(result);
		JsonArray hits = jelem.getAsJsonObject().get("hits").getAsJsonObject().get("hits").getAsJsonArray();
		for (int i = 0, n = hits.size(); i < n; i++) {
			JsonElement re = hits.get(i).getAsJsonObject().get("_source");
			MetaDataSearchResult mdsr = gson.fromJson(re, MetaDataSearchResult.class);
			returnValue.add(mdsr);
		}
		
		return returnValue;
	}

	private List<Object> marshallCommentsSearchResults(String result) {
		List<Object> returnValue = new ArrayList<>();
		Gson gson = new GsonBuilder().registerTypeAdapter(Instant.class, new InstantDeserializer()).create();
		JsonParser jp = new JsonParser();
		JsonElement jelem = jp.parse(result);
		JsonArray hits = jelem.getAsJsonObject().get("hits").getAsJsonObject().get("hits").getAsJsonArray();
		for (int i = 0, n = hits.size(); i < n; i++) {
			JsonElement re = hits.get(i).getAsJsonObject().get("_source");
			CommentsSearchResult mdsr = gson.fromJson(re, CommentsSearchResult.class);
			returnValue.add(mdsr);
		}
		
		return returnValue;
	}

	private List<Object> marshallFileDataSearchResults(String result) {
		List<Object> returnValue = new ArrayList<>();
		Gson gson = new GsonBuilder().registerTypeAdapter(Instant.class, new InstantDeserializer()).create();
		JsonParser jp = new JsonParser();
		JsonElement jelem = jp.parse(result);
		JsonArray hits = jelem.getAsJsonObject().get("hits").getAsJsonObject().get("hits").getAsJsonArray();
		for (int i = 0, n = hits.size(); i < n; i++) {
			JsonElement re = hits.get(i).getAsJsonObject().get("_source");
			FileDataSearchResult fdsr = gson.fromJson(re, FileDataSearchResult.class);
			returnValue.add(fdsr);
		}
		
		return returnValue;
	}

	private List<Object> marshallFileTextSearchResults(String result) throws ServiceCallerException, FileDataException {
		List<Object> returnValue = new ArrayList<>();
		Gson gson = new GsonBuilder().registerTypeAdapter(Instant.class, new InstantDeserializer()).create();
		JsonParser jp = new JsonParser();
		JsonElement jelem = jp.parse(result);
		JsonArray hits = jelem.getAsJsonObject().get("hits").getAsJsonObject().get("hits").getAsJsonArray();
		for (int i = 0, n = hits.size(); i < n; i++) {
			String fileId = hits.get(i).getAsJsonObject().get("_id").getAsString();
			JsonElement re = hits.get(i).getAsJsonObject().get("_source");
			FileTextSearchResult ftsr = gson.fromJson(re, FileTextSearchResult.class);
			ftsr.setFileId(fileId);
			returnValue.add(ftsr);
		}
		
		return returnValue;
	}

}
