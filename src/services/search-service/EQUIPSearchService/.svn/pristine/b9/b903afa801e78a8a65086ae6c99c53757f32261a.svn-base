package com.pfizer.equip.searchservice.resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.pfizer.elasticsearch.api.client.ElasticSearchClient;
import com.pfizer.elasticsearch.api.client.ElasticSearchClientException;
import com.pfizer.equip.searchservice.Application;
import com.pfizer.equip.searchservice.indexer.Indexer;
import com.pfizer.equip.searchservice.indexer.IndexerException;
import com.pfizer.equip.searchservice.util.HTTPStatusCodes;
import com.pfizer.equip.service.client.ServiceCallerException;

import spark.Request;
import spark.Response;
import spark.Route;
import spark.Spark;

public class SearchLineageRoute implements Route {
	private static Logger log = LoggerFactory.getLogger(SearchLineageRoute.class);
	private Indexer indexer;

	@Override
	public Object handle(Request request, Response response) throws Exception {
		if (indexer == null) {
			indexer = new Indexer(Application.getAppProperties());
		}
		String studyId = request.params(":studyId");
		String userId = request.headers(ResourceCommon.IAMPFIZERUSERCN);
		if (userId == null) {
			Spark.halt(HTTPStatusCodes.UNAUTHORIZED, "User cannot be determined");
		}
		return extractLineageFromSearchResult(
				searchForLineage(
					ResourceCommon.ELASTICSEARCH_SERVER,
					ResourceCommon.ELASTICSEARCH_USERNAME,
					ResourceCommon.ELASTICSEARCH_PASSWORD,
					studyId));
	}

	private String searchForLineage(String esServer, String esUsername, String esPassword, String studyId) throws ServiceCallerException, ElasticSearchClientException, IndexerException {
		log.info("searchForLineage - calling indexer.indexForLineageChanges()...");
		indexer.indexForLineageChanges();
		ElasticSearchClient esc = new ElasticSearchClient(esServer, esUsername, esPassword);
		return esc.searchIndex("lineagendx-nca", "nca", 
				String.format("{\"sort\": [\"created\"], \"query\" : {\"bool\":{\"must\":{\"bool\":{\"must\":{\"match_phrase\":{\"studyIds\":\"%s\"}}}}}}, \"from\" : 0, \"size\" : 10000}",
						studyId));
	}
	
	private String extractLineageFromSearchResult(String searchResult) {
		if ((searchResult == null) || searchResult.isEmpty()) {
			return new JsonArray().toString();
		}
		JsonParser jp = new JsonParser();
		JsonElement jelem = jp.parse(searchResult);
		JsonElement resultsElem = jelem.getAsJsonObject().get("hits");
		JsonArray hits = resultsElem.getAsJsonObject().get("hits").getAsJsonArray();
		JsonArray objects = new JsonArray();
		for (int i = 0, n = hits.size(); i < n; i++) {
			JsonObject obj = hits.get(i).getAsJsonObject().get("_source").getAsJsonObject();
			objects.add(obj);
		}
		return objects.toString();
	}

}
